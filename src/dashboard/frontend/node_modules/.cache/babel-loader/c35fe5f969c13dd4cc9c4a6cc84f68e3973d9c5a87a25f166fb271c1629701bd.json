{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport axios from 'axios';\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api';\nexport default {\n  name: 'DataSources',\n  data() {\n    return {\n      scrapingSourceIds: []\n    };\n  },\n  computed: {\n    ...mapGetters(['isLoading', 'hasError', 'errorMessage', 'dataSources', 'lastUpdated']),\n    // Add scraping status to each data source\n    sourcesWithStatus() {\n      if (!this.dataSources) return [];\n      return this.dataSources.map(source => ({\n        ...source,\n        scraping: this.scrapingSourceIds.includes(source.id)\n      }));\n    }\n  },\n  methods: {\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    async triggerScrape(sourceId) {\n      this.scrapingSourceIds.push(sourceId);\n      try {\n        await axios.post(`${apiBaseUrl}/data-sources/${sourceId}/scrape`);\n        this.$store.dispatch('fetchDataSources');\n      } catch (error) {\n        console.error('Error triggering scrape:', error);\n        this.$store.commit('SET_ERROR', 'Failed to trigger scrape');\n      } finally {\n        this.scrapingSourceIds = this.scrapingSourceIds.filter(id => id !== sourceId);\n      }\n    },\n    async toggleSourceStatus(sourceId, active) {\n      try {\n        await axios.put(`${apiBaseUrl}/data-sources/${sourceId}`, {\n          active\n        });\n        this.$store.dispatch('fetchDataSources');\n      } catch (error) {\n        console.error('Error updating source status:', error);\n        this.$store.commit('SET_ERROR', 'Failed to update source status');\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchDataSources');\n  }\n};","map":{"version":3,"names":["mapGetters","axios","apiBaseUrl","process","env","VUE_APP_API_URL","name","data","scrapingSourceIds","computed","sourcesWithStatus","dataSources","map","source","scraping","includes","id","methods","formatDate","dateString","date","Date","toLocaleString","triggerScrape","sourceId","push","post","$store","dispatch","error","console","commit","filter","toggleSourceStatus","active","put","mounted"],"sources":["/Users/zach/Documents/Git/JPS-Prospect-Aggregate/src/dashboard/frontend/src/views/DataSources.vue"],"sourcesContent":["<template>\n  <div>\n    <v-alert\n      v-if=\"hasError\"\n      type=\"error\"\n      dismissible\n      variant=\"tonal\"\n      border=\"start\"\n      class=\"mb-4\"\n    >\n      {{ errorMessage }}\n    </v-alert>\n\n    <!-- Page header with title and last updated info -->\n    <div class=\"d-flex align-center mb-6\">\n      <h1 class=\"text-h4 font-weight-bold\">Data Sources</h1>\n      <v-spacer></v-spacer>\n      <v-chip\n        v-if=\"lastUpdated\"\n        color=\"primary\"\n        size=\"small\"\n        variant=\"outlined\"\n        prepend-icon=\"mdi-clock-outline\"\n      >\n        Last updated: {{ formatDate(lastUpdated) }}\n      </v-chip>\n    </div>\n\n    <!-- Loading state -->\n    <v-progress-linear\n      v-if=\"isLoading\"\n      indeterminate\n      color=\"primary\"\n      class=\"mb-6\"\n    ></v-progress-linear>\n    \n    <!-- No data state -->\n    <v-alert\n      v-else-if=\"!dataSources || dataSources.length === 0\"\n      type=\"info\"\n      variant=\"tonal\"\n      border=\"start\"\n      icon=\"mdi-information-outline\"\n    >\n      No data sources available. Click the refresh button to load data.\n    </v-alert>\n    \n    <!-- Data sources grid -->\n    <div v-else>\n      <v-row>\n        <v-col\n          v-for=\"(source, index) in sourcesWithStatus\"\n          :key=\"index\"\n          cols=\"12\"\n          md=\"6\"\n          lg=\"4\"\n          class=\"d-flex\"\n        >\n          <v-card elevation=\"1\" class=\"w-100\">\n            <v-card-item>\n              <template v-slot:prepend>\n                <v-avatar\n                  :color=\"source.active ? 'success' : 'grey'\"\n                  class=\"mr-3\"\n                  size=\"42\"\n                >\n                  <v-icon color=\"white\">\n                    {{ source.active ? 'mdi-database-check' : 'mdi-database-off' }}\n                  </v-icon>\n                </v-avatar>\n              </template>\n              \n              <v-card-title class=\"text-h6 pb-0\">\n                {{ source.name }}\n              </v-card-title>\n              \n              <v-card-subtitle class=\"pt-1\">\n                <v-chip\n                  :color=\"source.active ? 'success' : 'error'\"\n                  size=\"x-small\"\n                  variant=\"tonal\"\n                  class=\"mt-1\"\n                >\n                  {{ source.active ? 'Active' : 'Inactive' }}\n                </v-chip>\n              </v-card-subtitle>\n            </v-card-item>\n            \n            <v-divider class=\"mx-4\"></v-divider>\n            \n            <v-card-text class=\"pt-4\">\n              <div class=\"d-flex align-center mb-2\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-link</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis text-truncate\">{{ source.url }}</span>\n              </div>\n              \n              <div class=\"d-flex align-center mb-2\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-calendar-clock</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis\">\n                  Last Scrape: {{ formatDate(source.lastScrape) || 'Never' }}\n                </span>\n              </div>\n              \n              <div class=\"d-flex align-center\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-file-document-multiple</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis\">\n                  Proposals: {{ source.proposalCount || 0 }}\n                </span>\n              </div>\n            </v-card-text>\n            \n            <v-card-actions class=\"px-4 pb-4\">\n              <v-btn\n                color=\"primary\"\n                variant=\"tonal\"\n                prepend-icon=\"mdi-refresh\"\n                @click=\"triggerScrape(source.id)\"\n                :loading=\"source.scraping\"\n                :disabled=\"!source.active\"\n                size=\"small\"\n              >\n                Scrape Now\n              </v-btn>\n              \n              <v-spacer></v-spacer>\n              \n              <v-btn\n                :color=\"source.active ? 'error' : 'success'\"\n                variant=\"tonal\"\n                :prepend-icon=\"source.active ? 'mdi-close' : 'mdi-check'\"\n                @click=\"toggleSourceStatus(source.id, !source.active)\"\n                size=\"small\"\n              >\n                {{ source.active ? 'Deactivate' : 'Activate' }}\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport axios from 'axios'\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api'\n\nexport default {\n  name: 'DataSources',\n  data() {\n    return {\n      scrapingSourceIds: []\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isLoading',\n      'hasError',\n      'errorMessage',\n      'dataSources',\n      'lastUpdated'\n    ]),\n    // Add scraping status to each data source\n    sourcesWithStatus() {\n      if (!this.dataSources) return []\n      return this.dataSources.map(source => ({\n        ...source,\n        scraping: this.scrapingSourceIds.includes(source.id)\n      }))\n    }\n  },\n  methods: {\n    formatDate(dateString) {\n      if (!dateString) return 'N/A'\n      const date = new Date(dateString)\n      return date.toLocaleString()\n    },\n    async triggerScrape(sourceId) {\n      this.scrapingSourceIds.push(sourceId)\n      \n      try {\n        await axios.post(`${apiBaseUrl}/data-sources/${sourceId}/scrape`)\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error triggering scrape:', error)\n        this.$store.commit('SET_ERROR', 'Failed to trigger scrape')\n      } finally {\n        this.scrapingSourceIds = this.scrapingSourceIds.filter(id => id !== sourceId)\n      }\n    },\n    async toggleSourceStatus(sourceId, active) {\n      try {\n        await axios.put(`${apiBaseUrl}/data-sources/${sourceId}`, { active })\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error updating source status:', error)\n        this.$store.commit('SET_ERROR', 'Failed to update source status')\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchDataSources')\n  }\n}\n</script>\n\n<style scoped>\n.w-100 {\n  width: 100%;\n}\n\n.text-truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n</style> "],"mappings":"AAgJA,SAASA,UAAS,QAAS,MAAK;AAChC,OAAOC,KAAI,MAAO,OAAM;;AAExB;AACA,MAAMC,UAAS,GAAIC,OAAO,CAACC,GAAG,CAACC,eAAc,IAAK,2BAA0B;AAE5E,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE;IACrB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGT,UAAU,CAAC,CACZ,WAAW,EACX,UAAU,EACV,cAAc,EACd,aAAa,EACb,aAAY,CACb,CAAC;IACF;IACAU,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE,OAAO,EAAC;MAC/B,OAAO,IAAI,CAACA,WAAW,CAACC,GAAG,CAACC,MAAK,KAAM;QACrC,GAAGA,MAAM;QACTC,QAAQ,EAAE,IAAI,CAACN,iBAAiB,CAACO,QAAQ,CAACF,MAAM,CAACG,EAAE;MACrD,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,KAAI;MAC5B,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU;MAChC,OAAOC,IAAI,CAACE,cAAc,CAAC;IAC7B,CAAC;IACD,MAAMC,aAAaA,CAACC,QAAQ,EAAE;MAC5B,IAAI,CAAChB,iBAAiB,CAACiB,IAAI,CAACD,QAAQ;MAEpC,IAAI;QACF,MAAMvB,KAAK,CAACyB,IAAI,CAAC,GAAGxB,UAAU,iBAAiBsB,QAAQ,SAAS;QAChE,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC,kBAAkB;MACzC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;QAC/C,IAAI,CAACF,MAAM,CAACI,MAAM,CAAC,WAAW,EAAE,0BAA0B;MAC5D,UAAU;QACR,IAAI,CAACvB,iBAAgB,GAAI,IAAI,CAACA,iBAAiB,CAACwB,MAAM,CAAChB,EAAC,IAAKA,EAAC,KAAMQ,QAAQ;MAC9E;IACF,CAAC;IACD,MAAMS,kBAAkBA,CAACT,QAAQ,EAAEU,MAAM,EAAE;MACzC,IAAI;QACF,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGjC,UAAU,iBAAiBsB,QAAQ,EAAE,EAAE;UAAEU;QAAO,CAAC;QACpE,IAAI,CAACP,MAAM,CAACC,QAAQ,CAAC,kBAAkB;MACzC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK;QACpD,IAAI,CAACF,MAAM,CAACI,MAAM,CAAC,WAAW,EAAE,gCAAgC;MAClE;IACF;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAACT,MAAM,CAACC,QAAQ,CAAC,kBAAkB;EACzC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}