{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api';\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    dashboardData: null,\n    dataSources: [],\n    lastUpdated: null\n  },\n  getters: {\n    isLoading: state => state.loading,\n    hasError: state => state.error !== null,\n    errorMessage: state => state.error,\n    dashboardData: state => state.dashboardData,\n    dataSources: state => state.dataSources,\n    lastUpdated: state => state.lastUpdated\n  },\n  mutations: {\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    SET_DASHBOARD_DATA(state, data) {\n      state.dashboardData = data;\n      state.lastUpdated = new Date();\n    },\n    SET_DATA_SOURCES(state, sources) {\n      state.dataSources = sources;\n    }\n  },\n  actions: {\n    async fetchDashboardData({\n      commit\n    }, {\n      page = 1,\n      perPage = 10\n    } = {}) {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      try {\n        const response = await axios.get(`${apiBaseUrl}/dashboard`, {\n          params: {\n            page,\n            per_page: perPage\n          }\n        });\n        commit('SET_DASHBOARD_DATA', response.data);\n      } catch (error) {\n        commit('SET_ERROR', error.message || 'Failed to fetch dashboard data');\n        console.error('Error fetching dashboard data:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchDataSources({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      try {\n        const response = await axios.get(`${apiBaseUrl}/data-sources`);\n        commit('SET_DATA_SOURCES', response.data);\n      } catch (error) {\n        commit('SET_ERROR', error.message || 'Failed to fetch data sources');\n        console.error('Error fetching data sources:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    refreshData({\n      dispatch\n    }) {\n      dispatch('fetchDashboardData');\n      dispatch('fetchDataSources');\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","apiBaseUrl","process","env","VUE_APP_API_URL","state","loading","error","dashboardData","dataSources","lastUpdated","getters","isLoading","hasError","errorMessage","mutations","SET_LOADING","SET_ERROR","SET_DASHBOARD_DATA","data","Date","SET_DATA_SOURCES","sources","actions","fetchDashboardData","commit","page","perPage","response","get","params","per_page","message","console","fetchDataSources","refreshData","dispatch"],"sources":["/Users/zach/Documents/Git/JPS-Prospect-Aggregate/src/dashboard/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api'\n\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    dashboardData: null,\n    dataSources: [],\n    lastUpdated: null\n  },\n  getters: {\n    isLoading: state => state.loading,\n    hasError: state => state.error !== null,\n    errorMessage: state => state.error,\n    dashboardData: state => state.dashboardData,\n    dataSources: state => state.dataSources,\n    lastUpdated: state => state.lastUpdated\n  },\n  mutations: {\n    SET_LOADING(state, loading) {\n      state.loading = loading\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    SET_DASHBOARD_DATA(state, data) {\n      state.dashboardData = data\n      state.lastUpdated = new Date()\n    },\n    SET_DATA_SOURCES(state, sources) {\n      state.dataSources = sources\n    }\n  },\n  actions: {\n    async fetchDashboardData({ commit }, { page = 1, perPage = 10 } = {}) {\n      commit('SET_LOADING', true)\n      commit('SET_ERROR', null)\n      \n      try {\n        const response = await axios.get(`${apiBaseUrl}/dashboard`, {\n          params: {\n            page,\n            per_page: perPage\n          }\n        })\n        commit('SET_DASHBOARD_DATA', response.data)\n      } catch (error) {\n        commit('SET_ERROR', error.message || 'Failed to fetch dashboard data')\n        console.error('Error fetching dashboard data:', error)\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    async fetchDataSources({ commit }) {\n      commit('SET_LOADING', true)\n      commit('SET_ERROR', null)\n      \n      try {\n        const response = await axios.get(`${apiBaseUrl}/data-sources`)\n        commit('SET_DATA_SOURCES', response.data)\n      } catch (error) {\n        commit('SET_ERROR', error.message || 'Failed to fetch data sources')\n        console.error('Error fetching data sources:', error)\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    refreshData({ dispatch }) {\n      dispatch('fetchDashboardData')\n      dispatch('fetchDataSources')\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}