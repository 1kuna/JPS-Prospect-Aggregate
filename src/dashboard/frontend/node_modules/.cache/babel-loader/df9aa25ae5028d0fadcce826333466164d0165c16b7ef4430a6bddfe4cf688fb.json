{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 1\n};\nconst _hoisted_2 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_alert = _resolveComponent(\"v-alert\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_chip = _resolveComponent(\"v-chip\");\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_progress_linear = _resolveComponent(\"v-progress-linear\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_ctx.hasError ? (_openBlock(), _createBlock(_component_v_alert, {\n    key: 0,\n    type: \"error\",\n    dismissible: \"\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.errorMessage), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  })) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_row, null, {\n    default: _withCtx(() => [_createVNode(_component_v_col, {\n      cols: \"12\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card, null, {\n        default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n          default: _withCtx(() => [_cache[0] || (_cache[0] = _createTextVNode(\" Data Sources \")), _createVNode(_component_v_spacer), _ctx.lastUpdated ? (_openBlock(), _createBlock(_component_v_chip, {\n            key: 0,\n            color: \"primary\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" Last updated: \" + _toDisplayString($options.formatDate(_ctx.lastUpdated)), 1 /* TEXT */)]),\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_ctx.isLoading ? (_openBlock(), _createBlock(_component_v_progress_linear, {\n            key: 0,\n            indeterminate: \"\",\n            color: \"primary\"\n          })) : !_ctx.dataSources || _ctx.dataSources.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_v_alert, {\n            type: \"info\"\n          }, {\n            default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" No data sources available. Click the refresh button to load data. \")])),\n            _: 1 /* STABLE */\n          })])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_v_row, null, {\n            default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.dataSources, (source, index) => {\n              return _openBlock(), _createBlock(_component_v_col, {\n                key: index,\n                cols: \"12\",\n                md: \"6\",\n                lg: \"4\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_card, null, {\n                  default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n                    default: _withCtx(() => [_createTextVNode(_toDisplayString(source.name) + \" \", 1 /* TEXT */), _createVNode(_component_v_spacer), _createVNode(_component_v_chip, {\n                      color: source.active ? 'success' : 'error',\n                      size: \"small\"\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString(source.active ? 'Active' : 'Inactive'), 1 /* TEXT */)]),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"color\"])]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_card_text, null, {\n                    default: _withCtx(() => [_createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"URL:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(source.url), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Last Scrape:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($options.formatDate(source.lastScrape) || 'Never'), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Proposals:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(source.proposalCount || 0), 1 /* TEXT */)])]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_card_actions, null, {\n                    default: _withCtx(() => [_createVNode(_component_v_btn, {\n                      color: \"primary\",\n                      variant: \"text\",\n                      onClick: $event => $options.triggerScrape(source.id),\n                      loading: source.scraping\n                    }, {\n                      default: _withCtx(() => [...(_cache[5] || (_cache[5] = [_createTextVNode(\" Scrape Now \")]))]),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\", \"loading\"]), _createVNode(_component_v_btn, {\n                      color: source.active ? 'error' : 'success',\n                      variant: \"text\",\n                      onClick: $event => $options.toggleSourceStatus(source.id, !source.active)\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString(source.active ? 'Deactivate' : 'Activate'), 1 /* TEXT */)]),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"color\", \"onClick\"])]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */)]),\n                  _: 2 /* DYNAMIC */\n                }, 1024 /* DYNAMIC_SLOTS */)]),\n                _: 2 /* DYNAMIC */\n              }, 1024 /* DYNAMIC_SLOTS */);\n            }), 128 /* KEYED_FRAGMENT */))]),\n            _: 1 /* STABLE */\n          })]))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["key","_createElementBlock","_ctx","hasError","_createBlock","_component_v_alert","type","dismissible","default","_withCtx","_createTextVNode","_toDisplayString","errorMessage","_","_createCommentVNode","_createVNode","_component_v_row","_component_v_col","cols","_component_v_card","_component_v_card_title","_component_v_spacer","lastUpdated","_component_v_chip","color","size","$options","formatDate","_component_v_card_text","isLoading","_component_v_progress_linear","indeterminate","dataSources","length","_hoisted_1","_cache","_hoisted_2","_Fragment","_renderList","source","index","md","lg","name","active","_createElementVNode","url","lastScrape","proposalCount","_component_v_card_actions","_component_v_btn","variant","onClick","$event","triggerScrape","id","loading","scraping","toggleSourceStatus"],"sources":["/Users/zach/Documents/Git/JPS-Prospect-Aggregate/src/dashboard/frontend/src/views/DataSources.vue"],"sourcesContent":["<template>\n  <div>\n    <v-alert\n      v-if=\"hasError\"\n      type=\"error\"\n      dismissible\n    >\n      {{ errorMessage }}\n    </v-alert>\n\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title>\n            Data Sources\n            <v-spacer></v-spacer>\n            <v-chip v-if=\"lastUpdated\" color=\"primary\" size=\"small\">\n              Last updated: {{ formatDate(lastUpdated) }}\n            </v-chip>\n          </v-card-title>\n          <v-card-text>\n            <v-progress-linear\n              v-if=\"isLoading\"\n              indeterminate\n              color=\"primary\"\n            ></v-progress-linear>\n            \n            <div v-else-if=\"!dataSources || dataSources.length === 0\">\n              <v-alert type=\"info\">\n                No data sources available. Click the refresh button to load data.\n              </v-alert>\n            </div>\n            \n            <div v-else>\n              <v-row>\n                <v-col\n                  v-for=\"(source, index) in dataSources\"\n                  :key=\"index\"\n                  cols=\"12\"\n                  md=\"6\"\n                  lg=\"4\"\n                >\n                  <v-card>\n                    <v-card-title>\n                      {{ source.name }}\n                      <v-spacer></v-spacer>\n                      <v-chip\n                        :color=\"source.active ? 'success' : 'error'\"\n                        size=\"small\"\n                      >\n                        {{ source.active ? 'Active' : 'Inactive' }}\n                      </v-chip>\n                    </v-card-title>\n                    <v-card-text>\n                      <p><strong>URL:</strong> {{ source.url }}</p>\n                      <p><strong>Last Scrape:</strong> {{ formatDate(source.lastScrape) || 'Never' }}</p>\n                      <p><strong>Proposals:</strong> {{ source.proposalCount || 0 }}</p>\n                    </v-card-text>\n                    <v-card-actions>\n                      <v-btn\n                        color=\"primary\"\n                        variant=\"text\"\n                        @click=\"triggerScrape(source.id)\"\n                        :loading=\"source.scraping\"\n                      >\n                        Scrape Now\n                      </v-btn>\n                      <v-btn\n                        :color=\"source.active ? 'error' : 'success'\"\n                        variant=\"text\"\n                        @click=\"toggleSourceStatus(source.id, !source.active)\"\n                      >\n                        {{ source.active ? 'Deactivate' : 'Activate' }}\n                      </v-btn>\n                    </v-card-actions>\n                  </v-card>\n                </v-col>\n              </v-row>\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport axios from 'axios'\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api'\n\nexport default {\n  name: 'DataSources',\n  data() {\n    return {\n      scrapingSourceIds: []\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isLoading',\n      'hasError',\n      'errorMessage',\n      'dataSources',\n      'lastUpdated'\n    ]),\n    // Add scraping status to each data source\n    sourcesWithStatus() {\n      if (!this.dataSources) return []\n      return this.dataSources.map(source => ({\n        ...source,\n        scraping: this.scrapingSourceIds.includes(source.id)\n      }))\n    }\n  },\n  methods: {\n    formatDate(dateString) {\n      if (!dateString) return 'N/A'\n      const date = new Date(dateString)\n      return date.toLocaleString()\n    },\n    async triggerScrape(sourceId) {\n      this.scrapingSourceIds.push(sourceId)\n      \n      try {\n        await axios.post(`${apiBaseUrl}/data-sources/${sourceId}/scrape`)\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error triggering scrape:', error)\n        this.$store.commit('SET_ERROR', 'Failed to trigger scrape')\n      } finally {\n        this.scrapingSourceIds = this.scrapingSourceIds.filter(id => id !== sourceId)\n      }\n    },\n    async toggleSourceStatus(sourceId, active) {\n      try {\n        await axios.put(`${apiBaseUrl}/data-sources/${sourceId}`, { active })\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error updating source status:', error)\n        this.$store.commit('SET_ERROR', 'Failed to update source status')\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchDataSources')\n  }\n}\n</script> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}