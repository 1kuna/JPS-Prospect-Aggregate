{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport axios from 'axios';\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api';\nexport default {\n  name: 'DataSources',\n  data() {\n    return {\n      scrapingSourceIds: [],\n      checkingHealthSourceIds: [],\n      sourceHealthData: {},\n      confirmDialog: {\n        show: false,\n        title: '',\n        message: '',\n        requireInput: false,\n        inputLabel: '',\n        input: '',\n        action: null\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: 'success',\n        timeout: 5000\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['isLoading', 'hasError', 'errorMessage', 'dataSources', 'lastUpdated']),\n    // Add scraping status and health data to each data source\n    sourcesWithStatus() {\n      if (!this.dataSources) return [];\n      return this.dataSources.map(source => ({\n        ...source,\n        scraping: this.scrapingSourceIds.includes(source.id),\n        checkingHealth: this.checkingHealthSourceIds.includes(source.id),\n        health: this.sourceHealthData[source.id] || null\n      }));\n    }\n  },\n  methods: {\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    async triggerScrape(sourceId) {\n      this.scrapingSourceIds.push(sourceId);\n      try {\n        await axios.post(`${apiBaseUrl}/data-sources/${sourceId}/scrape`);\n        this.showSnackbar('Scrape initiated successfully');\n        this.$store.dispatch('fetchDataSources');\n      } catch (error) {\n        console.error('Error triggering scrape:', error);\n        this.showSnackbar('Failed to trigger scrape: ' + error.message, 'error');\n      } finally {\n        this.scrapingSourceIds = this.scrapingSourceIds.filter(id => id !== sourceId);\n      }\n    },\n    async toggleSourceStatus(sourceId, active) {\n      try {\n        await axios.put(`${apiBaseUrl}/data-sources/${sourceId}`, {\n          active\n        });\n        this.showSnackbar(`Source ${active ? 'activated' : 'deactivated'} successfully`);\n        this.$store.dispatch('fetchDataSources');\n      } catch (error) {\n        console.error('Error updating source status:', error);\n        this.showSnackbar('Failed to update source status: ' + error.message, 'error');\n      }\n    },\n    async checkSourceHealth(sourceId) {\n      this.checkingHealthSourceIds.push(sourceId);\n      try {\n        const response = await axios.post(`${apiBaseUrl}/scraper-status/${sourceId}/check`);\n        this.sourceHealthData = {\n          ...this.sourceHealthData,\n          [sourceId]: response.data\n        };\n        const status = response.data.status === 'working' ? 'healthy' : 'unhealthy';\n        this.showSnackbar(`Source is ${status}`);\n      } catch (error) {\n        console.error('Error checking source health:', error);\n        this.showSnackbar('Failed to check source health: ' + error.message, 'error');\n      } finally {\n        this.checkingHealthSourceIds = this.checkingHealthSourceIds.filter(id => id !== sourceId);\n      }\n    },\n    showConfirmDialog(title, message, action, requireInput = false, inputLabel = '') {\n      this.confirmDialog = {\n        show: true,\n        title,\n        message,\n        requireInput,\n        inputLabel,\n        input: '',\n        action\n      };\n    },\n    confirmAction() {\n      if (this.confirmDialog.requireInput && this.confirmDialog.input !== this.confirmDialog.inputLabel) {\n        this.showSnackbar('Please type the confirmation text exactly as shown', 'error');\n        return;\n      }\n      this.confirmDialog.show = false;\n      if (typeof this.confirmDialog.action === 'function') {\n        this.confirmDialog.action();\n      }\n    },\n    showSnackbar(text, color = 'success', timeout = 5000) {\n      this.snackbar = {\n        show: true,\n        text,\n        color,\n        timeout\n      };\n    },\n    rebuildDatabase() {\n      this.showConfirmDialog('Rebuild Database', 'WARNING: This will rebuild the database from scratch.<br><br>' + 'This operation will:<br>' + '1. Create a backup of the current database<br>' + '2. Rebuild the database structure<br>' + '3. Preserve your data<br><br>' + 'The application may need to be restarted after this operation.', this.performDatabaseRebuild);\n    },\n    async performDatabaseRebuild() {\n      try {\n        await axios.post(`${apiBaseUrl}/rebuild-db`);\n        this.showSnackbar('Database rebuild started. The application may need to be restarted.');\n      } catch (error) {\n        console.error('Error rebuilding database:', error);\n        this.showSnackbar('Failed to rebuild database: ' + error.message, 'error');\n      }\n    },\n    initializeDatabase() {\n      this.showConfirmDialog('Initialize Database', 'WARNING: This will delete the current database and create a new one!<br><br>' + 'This operation will:<br>' + '1. Delete ALL existing data<br>' + '2. Create a new empty database<br>' + '3. Initialize the data sources<br><br>' + 'This operation cannot be undone. All your data will be permanently lost.', this.performDatabaseInitialization, true, 'INIT');\n    },\n    async performDatabaseInitialization() {\n      try {\n        await axios.post(`${apiBaseUrl}/init-db`);\n        this.showSnackbar('Database initialization started. The page will reload shortly.');\n        setTimeout(() => window.location.reload(), 5000);\n      } catch (error) {\n        console.error('Error initializing database:', error);\n        this.showSnackbar('Failed to initialize database: ' + error.message, 'error');\n      }\n    },\n    deleteAllFiles() {\n      this.showConfirmDialog('Delete All Files', 'WARNING: This is a destructive operation!<br><br>' + 'This will:<br>' + '1. Delete ALL downloaded files<br>' + '2. Delete ALL database backups<br>' + '3. Delete the current database<br>' + '4. Create a new empty database<br><br>' + 'This operation cannot be undone. All your data will be permanently lost.', this.performDeleteAllFiles, true, 'RESET');\n    },\n    async performDeleteAllFiles() {\n      try {\n        await axios.post(`${apiBaseUrl}/reset-everything`);\n        this.showSnackbar('Reset initiated. The application will be reloaded shortly.');\n        setTimeout(() => window.location.reload(), 5000);\n      } catch (error) {\n        console.error('Error resetting everything:', error);\n        this.showSnackbar('Failed to reset: ' + error.message, 'error');\n      }\n    },\n    async runHealthChecks() {\n      try {\n        this.showSnackbar('Running health checks for all sources...', 'info');\n\n        // Get all data sources\n        const sourcesResponse = await axios.get(`${apiBaseUrl}/data-sources`);\n        const sources = sourcesResponse.data;\n        if (!sources || sources.length === 0) {\n          this.showSnackbar('No data sources found', 'warning');\n          return;\n        }\n\n        // Run health checks for each source\n        const healthCheckPromises = sources.map(source => axios.post(`${apiBaseUrl}/scraper-status/${source.id}/check`).then(response => {\n          const result = response.data;\n          // Store health data for each source\n          this.sourceHealthData = {\n            ...this.sourceHealthData,\n            [source.id]: result\n          };\n          return result;\n        }));\n\n        // Wait for all health checks to complete\n        const results = await Promise.all(healthCheckPromises);\n\n        // Count successes and failures\n        const successes = results.filter(result => result.success && result.status === 'working').length;\n        const failures = results.filter(result => result.success && result.status === 'not_working').length;\n        const errors = results.filter(result => !result.success).length;\n        this.showSnackbar(`Health checks completed: ${successes} working, ${failures} not working, ${errors} errors.`);\n      } catch (error) {\n        console.error('Error running health checks:', error);\n        this.showSnackbar('Failed to run health checks: ' + error.message, 'error');\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchDataSources');\n  }\n};","map":{"version":3,"names":["mapGetters","axios","apiBaseUrl","process","env","VUE_APP_API_URL","name","data","scrapingSourceIds","checkingHealthSourceIds","sourceHealthData","confirmDialog","show","title","message","requireInput","inputLabel","input","action","snackbar","text","color","timeout","computed","sourcesWithStatus","dataSources","map","source","scraping","includes","id","checkingHealth","health","methods","formatDate","dateString","date","Date","toLocaleString","triggerScrape","sourceId","push","post","showSnackbar","$store","dispatch","error","console","filter","toggleSourceStatus","active","put","checkSourceHealth","response","status","showConfirmDialog","confirmAction","rebuildDatabase","performDatabaseRebuild","initializeDatabase","performDatabaseInitialization","setTimeout","window","location","reload","deleteAllFiles","performDeleteAllFiles","runHealthChecks","sourcesResponse","get","sources","length","healthCheckPromises","then","result","results","Promise","all","successes","success","failures","errors","mounted"],"sources":["/Users/zach/Documents/Git/JPS-Prospect-Aggregate/src/dashboard/frontend/src/views/DataSources.vue"],"sourcesContent":["<template>\n  <div>\n    <v-alert\n      v-if=\"hasError\"\n      type=\"error\"\n      dismissible\n      variant=\"tonal\"\n      border=\"start\"\n      class=\"mb-4\"\n    >\n      {{ errorMessage }}\n    </v-alert>\n\n    <!-- Page header with title and last updated info -->\n    <div class=\"d-flex align-center mb-4\">\n      <h1 class=\"text-h4 font-weight-bold\">Data Sources</h1>\n      <v-spacer></v-spacer>\n      <v-chip\n        v-if=\"lastUpdated\"\n        color=\"primary\"\n        size=\"small\"\n        variant=\"outlined\"\n        prepend-icon=\"mdi-clock-outline\"\n      >\n        Last updated: {{ formatDate(lastUpdated) }}\n      </v-chip>\n    </div>\n\n    <!-- Loading state -->\n    <v-progress-linear\n      v-if=\"isLoading\"\n      indeterminate\n      color=\"primary\"\n      class=\"mb-4\"\n    ></v-progress-linear>\n    \n    <!-- No data state -->\n    <v-alert\n      v-else-if=\"!dataSources || dataSources.length === 0\"\n      type=\"info\"\n      variant=\"tonal\"\n      border=\"start\"\n      icon=\"mdi-information-outline\"\n    >\n      No data sources available. Click the refresh button to load data.\n    </v-alert>\n    \n    <!-- Advanced Features Section -->\n    <v-card elevation=\"1\" class=\"mb-6\">\n      <v-card-title class=\"py-3 px-6\">\n        <v-icon size=\"small\" color=\"primary\" class=\"mr-2\">mdi-tools</v-icon>\n        Advanced Features\n      </v-card-title>\n      \n      <v-divider></v-divider>\n      \n      <v-card-text class=\"py-4\">\n        <v-row>\n          <v-col cols=\"12\" md=\"6\" lg=\"3\">\n            <v-btn\n              block\n              color=\"primary\"\n              variant=\"tonal\"\n              prepend-icon=\"mdi-database-refresh\"\n              @click=\"rebuildDatabase\"\n              class=\"mb-2\"\n            >\n              Rebuild Database\n            </v-btn>\n          </v-col>\n          \n          <v-col cols=\"12\" md=\"6\" lg=\"3\">\n            <v-btn\n              block\n              color=\"primary\"\n              variant=\"tonal\"\n              prepend-icon=\"mdi-database-plus\"\n              @click=\"initializeDatabase\"\n              class=\"mb-2\"\n            >\n              Initialize Database\n            </v-btn>\n          </v-col>\n          \n          <v-col cols=\"12\" md=\"6\" lg=\"3\">\n            <v-btn\n              block\n              color=\"error\"\n              variant=\"tonal\"\n              prepend-icon=\"mdi-delete\"\n              @click=\"deleteAllFiles\"\n              class=\"mb-2\"\n            >\n              Delete All Files\n            </v-btn>\n          </v-col>\n          \n          <v-col cols=\"12\" md=\"6\" lg=\"3\">\n            <v-btn\n              block\n              color=\"warning\"\n              variant=\"tonal\"\n              prepend-icon=\"mdi-heart-pulse\"\n              @click=\"runHealthChecks\"\n              class=\"mb-2\"\n            >\n              Run Health Checks\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n    \n    <!-- Data sources grid -->\n    <div v-if=\"dataSources && dataSources.length > 0\">\n      <v-row>\n        <v-col\n          v-for=\"(source, index) in sourcesWithStatus\"\n          :key=\"index\"\n          cols=\"12\"\n          md=\"6\"\n          lg=\"4\"\n          class=\"d-flex\"\n        >\n          <v-card elevation=\"1\" class=\"w-100\">\n            <v-card-item>\n              <template v-slot:prepend>\n                <v-avatar\n                  :color=\"source.active ? 'success' : 'grey'\"\n                  class=\"mr-3\"\n                  size=\"42\"\n                >\n                  <v-icon color=\"white\">\n                    {{ source.active ? 'mdi-database-check' : 'mdi-database-off' }}\n                  </v-icon>\n                </v-avatar>\n              </template>\n              \n              <v-card-title class=\"text-h6 pb-0\">\n                {{ source.name }}\n              </v-card-title>\n              \n              <v-card-subtitle class=\"pt-1\">\n                <v-chip\n                  :color=\"source.active ? 'success' : 'error'\"\n                  size=\"x-small\"\n                  variant=\"tonal\"\n                  class=\"mt-1\"\n                >\n                  {{ source.active ? 'Active' : 'Inactive' }}\n                </v-chip>\n                \n                <v-chip\n                  v-if=\"source.health\"\n                  :color=\"source.health.status === 'working' ? 'success' : 'error'\"\n                  size=\"x-small\"\n                  variant=\"tonal\"\n                  class=\"mt-1 ml-1\"\n                >\n                  {{ source.health.status === 'working' ? 'Healthy' : 'Unhealthy' }}\n                </v-chip>\n              </v-card-subtitle>\n            </v-card-item>\n            \n            <v-divider class=\"mx-4\"></v-divider>\n            \n            <v-card-text class=\"pt-4\">\n              <div class=\"d-flex align-center mb-2\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-link</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis text-truncate\">{{ source.url }}</span>\n              </div>\n              \n              <div class=\"d-flex align-center mb-2\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-calendar-clock</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis\">\n                  Last Scrape: {{ formatDate(source.lastScrape) || 'Never' }}\n                </span>\n              </div>\n              \n              <div class=\"d-flex align-center\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-file-document-multiple</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis\">\n                  Proposals: {{ source.proposalCount || 0 }}\n                </span>\n              </div>\n              \n              <div v-if=\"source.health && source.health.message\" class=\"d-flex align-center mt-2\">\n                <v-icon size=\"small\" color=\"grey\" class=\"mr-2\">mdi-information</v-icon>\n                <span class=\"text-body-2 text-medium-emphasis\">\n                  {{ source.health.message }}\n                </span>\n              </div>\n            </v-card-text>\n            \n            <v-card-actions class=\"px-4 pb-4\">\n              <v-btn\n                color=\"primary\"\n                variant=\"tonal\"\n                prepend-icon=\"mdi-refresh\"\n                @click=\"triggerScrape(source.id)\"\n                :loading=\"source.scraping\"\n                :disabled=\"!source.active\"\n                size=\"small\"\n              >\n                Scrape Now\n              </v-btn>\n              \n              <v-btn\n                color=\"warning\"\n                variant=\"tonal\"\n                prepend-icon=\"mdi-heart-pulse\"\n                @click=\"checkSourceHealth(source.id)\"\n                :loading=\"source.checkingHealth\"\n                size=\"small\"\n                class=\"ml-2\"\n              >\n                Check Health\n              </v-btn>\n              \n              <v-spacer></v-spacer>\n              \n              <v-btn\n                :color=\"source.active ? 'error' : 'success'\"\n                variant=\"tonal\"\n                :prepend-icon=\"source.active ? 'mdi-close' : 'mdi-check'\"\n                @click=\"toggleSourceStatus(source.id, !source.active)\"\n                size=\"small\"\n              >\n                {{ source.active ? 'Deactivate' : 'Activate' }}\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-row>\n    </div>\n    \n    <!-- Confirmation Dialog -->\n    <v-dialog v-model=\"confirmDialog.show\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h5\">{{ confirmDialog.title }}</v-card-title>\n        <v-card-text>\n          <p v-html=\"confirmDialog.message\"></p>\n          <v-text-field\n            v-if=\"confirmDialog.requireInput\"\n            v-model=\"confirmDialog.input\"\n            :label=\"confirmDialog.inputLabel\"\n            variant=\"outlined\"\n            class=\"mt-4\"\n          ></v-text-field>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey-darken-1\" variant=\"text\" @click=\"confirmDialog.show = false\">Cancel</v-btn>\n          <v-btn color=\"error\" variant=\"tonal\" @click=\"confirmAction\">Confirm</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    \n    <!-- Success/Error Snackbar -->\n    <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" :timeout=\"snackbar.timeout\">\n      {{ snackbar.text }}\n      <template v-slot:actions>\n        <v-btn variant=\"text\" @click=\"snackbar.show = false\">Close</v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport axios from 'axios'\n\n// Get the API base URL from environment or use default\nconst apiBaseUrl = process.env.VUE_APP_API_URL || 'http://localhost:5001/api'\n\nexport default {\n  name: 'DataSources',\n  data() {\n    return {\n      scrapingSourceIds: [],\n      checkingHealthSourceIds: [],\n      sourceHealthData: {},\n      confirmDialog: {\n        show: false,\n        title: '',\n        message: '',\n        requireInput: false,\n        inputLabel: '',\n        input: '',\n        action: null\n      },\n      snackbar: {\n        show: false,\n        text: '',\n        color: 'success',\n        timeout: 5000\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'isLoading',\n      'hasError',\n      'errorMessage',\n      'dataSources',\n      'lastUpdated'\n    ]),\n    // Add scraping status and health data to each data source\n    sourcesWithStatus() {\n      if (!this.dataSources) return []\n      return this.dataSources.map(source => ({\n        ...source,\n        scraping: this.scrapingSourceIds.includes(source.id),\n        checkingHealth: this.checkingHealthSourceIds.includes(source.id),\n        health: this.sourceHealthData[source.id] || null\n      }))\n    }\n  },\n  methods: {\n    formatDate(dateString) {\n      if (!dateString) return 'N/A'\n      const date = new Date(dateString)\n      return date.toLocaleString()\n    },\n    async triggerScrape(sourceId) {\n      this.scrapingSourceIds.push(sourceId)\n      \n      try {\n        await axios.post(`${apiBaseUrl}/data-sources/${sourceId}/scrape`)\n        this.showSnackbar('Scrape initiated successfully')\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error triggering scrape:', error)\n        this.showSnackbar('Failed to trigger scrape: ' + error.message, 'error')\n      } finally {\n        this.scrapingSourceIds = this.scrapingSourceIds.filter(id => id !== sourceId)\n      }\n    },\n    async toggleSourceStatus(sourceId, active) {\n      try {\n        await axios.put(`${apiBaseUrl}/data-sources/${sourceId}`, { active })\n        this.showSnackbar(`Source ${active ? 'activated' : 'deactivated'} successfully`)\n        this.$store.dispatch('fetchDataSources')\n      } catch (error) {\n        console.error('Error updating source status:', error)\n        this.showSnackbar('Failed to update source status: ' + error.message, 'error')\n      }\n    },\n    async checkSourceHealth(sourceId) {\n      this.checkingHealthSourceIds.push(sourceId)\n      \n      try {\n        const response = await axios.post(`${apiBaseUrl}/scraper-status/${sourceId}/check`)\n        this.sourceHealthData = {\n          ...this.sourceHealthData,\n          [sourceId]: response.data\n        }\n        \n        const status = response.data.status === 'working' ? 'healthy' : 'unhealthy'\n        this.showSnackbar(`Source is ${status}`)\n      } catch (error) {\n        console.error('Error checking source health:', error)\n        this.showSnackbar('Failed to check source health: ' + error.message, 'error')\n      } finally {\n        this.checkingHealthSourceIds = this.checkingHealthSourceIds.filter(id => id !== sourceId)\n      }\n    },\n    showConfirmDialog(title, message, action, requireInput = false, inputLabel = '') {\n      this.confirmDialog = {\n        show: true,\n        title,\n        message,\n        requireInput,\n        inputLabel,\n        input: '',\n        action\n      }\n    },\n    confirmAction() {\n      if (this.confirmDialog.requireInput && \n          this.confirmDialog.input !== this.confirmDialog.inputLabel) {\n        this.showSnackbar('Please type the confirmation text exactly as shown', 'error')\n        return\n      }\n      \n      this.confirmDialog.show = false\n      if (typeof this.confirmDialog.action === 'function') {\n        this.confirmDialog.action()\n      }\n    },\n    showSnackbar(text, color = 'success', timeout = 5000) {\n      this.snackbar = {\n        show: true,\n        text,\n        color,\n        timeout\n      }\n    },\n    rebuildDatabase() {\n      this.showConfirmDialog(\n        'Rebuild Database',\n        'WARNING: This will rebuild the database from scratch.<br><br>' +\n        'This operation will:<br>' +\n        '1. Create a backup of the current database<br>' +\n        '2. Rebuild the database structure<br>' +\n        '3. Preserve your data<br><br>' +\n        'The application may need to be restarted after this operation.',\n        this.performDatabaseRebuild\n      )\n    },\n    async performDatabaseRebuild() {\n      try {\n        await axios.post(`${apiBaseUrl}/rebuild-db`)\n        this.showSnackbar('Database rebuild started. The application may need to be restarted.')\n      } catch (error) {\n        console.error('Error rebuilding database:', error)\n        this.showSnackbar('Failed to rebuild database: ' + error.message, 'error')\n      }\n    },\n    initializeDatabase() {\n      this.showConfirmDialog(\n        'Initialize Database',\n        'WARNING: This will delete the current database and create a new one!<br><br>' +\n        'This operation will:<br>' +\n        '1. Delete ALL existing data<br>' +\n        '2. Create a new empty database<br>' +\n        '3. Initialize the data sources<br><br>' +\n        'This operation cannot be undone. All your data will be permanently lost.',\n        this.performDatabaseInitialization,\n        true,\n        'INIT'\n      )\n    },\n    async performDatabaseInitialization() {\n      try {\n        await axios.post(`${apiBaseUrl}/init-db`)\n        this.showSnackbar('Database initialization started. The page will reload shortly.')\n        setTimeout(() => window.location.reload(), 5000)\n      } catch (error) {\n        console.error('Error initializing database:', error)\n        this.showSnackbar('Failed to initialize database: ' + error.message, 'error')\n      }\n    },\n    deleteAllFiles() {\n      this.showConfirmDialog(\n        'Delete All Files',\n        'WARNING: This is a destructive operation!<br><br>' +\n        'This will:<br>' +\n        '1. Delete ALL downloaded files<br>' +\n        '2. Delete ALL database backups<br>' +\n        '3. Delete the current database<br>' +\n        '4. Create a new empty database<br><br>' +\n        'This operation cannot be undone. All your data will be permanently lost.',\n        this.performDeleteAllFiles,\n        true,\n        'RESET'\n      )\n    },\n    async performDeleteAllFiles() {\n      try {\n        await axios.post(`${apiBaseUrl}/reset-everything`)\n        this.showSnackbar('Reset initiated. The application will be reloaded shortly.')\n        setTimeout(() => window.location.reload(), 5000)\n      } catch (error) {\n        console.error('Error resetting everything:', error)\n        this.showSnackbar('Failed to reset: ' + error.message, 'error')\n      }\n    },\n    async runHealthChecks() {\n      try {\n        this.showSnackbar('Running health checks for all sources...', 'info')\n        \n        // Get all data sources\n        const sourcesResponse = await axios.get(`${apiBaseUrl}/data-sources`)\n        const sources = sourcesResponse.data\n        \n        if (!sources || sources.length === 0) {\n          this.showSnackbar('No data sources found', 'warning')\n          return\n        }\n        \n        // Run health checks for each source\n        const healthCheckPromises = sources.map(source => \n          axios.post(`${apiBaseUrl}/scraper-status/${source.id}/check`)\n            .then(response => {\n              const result = response.data\n              // Store health data for each source\n              this.sourceHealthData = {\n                ...this.sourceHealthData,\n                [source.id]: result\n              }\n              return result\n            })\n        )\n        \n        // Wait for all health checks to complete\n        const results = await Promise.all(healthCheckPromises)\n        \n        // Count successes and failures\n        const successes = results.filter(result => \n          result.success && result.status === 'working'\n        ).length\n        \n        const failures = results.filter(result => \n          result.success && result.status === 'not_working'\n        ).length\n        \n        const errors = results.filter(result => !result.success).length\n        \n        this.showSnackbar(`Health checks completed: ${successes} working, ${failures} not working, ${errors} errors.`)\n      } catch (error) {\n        console.error('Error running health checks:', error)\n        this.showSnackbar('Failed to run health checks: ' + error.message, 'error')\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchDataSources')\n  }\n}\n</script>\n\n<style scoped>\n.w-100 {\n  width: 100%;\n}\n\n.text-truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}