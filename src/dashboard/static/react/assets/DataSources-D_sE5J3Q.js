import{u,c as O,r as o,j as t,A as _,a as z,b as B,B as D,D as G,d as H,e as X,g as q,h as J,i as Q,f as V,S as W}from"./index-qh1kmJIf.js";import{P as w,D as Y}from"./DataTable-CWJV83Qe.js";const Z=s=>s.dataSources,ee=s=>s.loading.dataSources,se=s=>s.errors.dataSources,te=s=>s.fetchDataSources,ae=s=>s.createDataSource,re=s=>s.updateDataSource,oe=s=>s.pullDataSource,ce=s=>s.getScraperStatus,ne=s=>s.pullingProgress,le=s=>s.setPullingProgress;function de(){const s=u(Z),S=u(ee),x=u(se),l=u(te),I=u(ae),P=u(re),$=u(oe),f=u(ce),v=u(ne),c=u(le),{toast:n}=O(),[M,h]=o.useState(!1),[d,k]=o.useState(null),[p,m]=o.useState(!0);o.useEffect(()=>(console.log("DataSources component mounted, fetching data sources..."),l().then(()=>{console.log("Data sources fetched successfully in component"),m(!1)}).catch(e=>{console.error("Error fetching data sources in component:",e),m(!1)}),()=>{console.log("DataSources component unmounting")}),[l]),o.useEffect(()=>{if(!s.length)return;const e=s.filter(i=>v[i.id]);if(e.length===0)return;console.log("Found running data sources:",e);const a=[],r={},g=3*60*1e3;return e.forEach(i=>{r[i.id]=Date.now();const E=setInterval(async()=>{try{const y=Date.now()-r[i.id];if(y>g){clearInterval(E);const C=`Scraper timed out after ${Math.floor(y/6e4)} minutes. The operation may still be running in the background.`;n({title:"Scraper Timeout",description:C,variant:"destructive",duration:15e3}),await l(),c(i.id,!1);return}const j=await f(String(i.id));if(console.log(`Status check for source ID ${i.id}:`,j),j.status!=="running"){if(clearInterval(E),j.status==="success"){const C=`Successfully pulled data from ${i.name}`;n({title:"Success!",description:C,variant:"success",duration:1e4})}else n({title:"Error pulling data",description:j.message,variant:"destructive",duration:15e3});await l(),c(i.id,!1)}}catch(y){console.error("Error checking scraper status:",y)}},1e3);a.push(E)}),()=>{a.forEach(i=>clearInterval(i))}},[s,v,f,l,n,c]),o.useEffect(()=>{console.log("DataSources component state:",{dataSources:s,loading:S,errors:x,isInitialLoad:p})},[s,S,x,p]);const b=o.useCallback(()=>{console.log("Manually refreshing data sources..."),m(!0),l().then(()=>{console.log("Data sources refreshed successfully"),m(!1)}).catch(e=>{console.error("Error refreshing data sources:",e),m(!1)})},[l]),A=o.useCallback(async e=>{try{await I(e),h(!1)}catch(a){console.error("Failed to create data source:",a)}},[I]),R=o.useCallback(async e=>{try{await P(String(e.id),e),h(!1),k(null)}catch(a){console.error("Failed to update data source:",a)}},[P]),T=o.useCallback(e=>{k(e),h(!0)},[]),N=o.useCallback(async()=>{if(!(!s||s.length===0))for(const e of s)try{const a=await f(String(e.id));console.log(`Initial status check for source ID ${e.id}:`,a),a.status==="running"&&(c(e.id,!0),L(e))}catch(a){console.error(`Error checking status for source ID ${e.id}:`,a)}},[s,f,c]),L=o.useCallback(e=>{console.log(`Starting status polling for source ID ${e.id}`);let a=setInterval(async()=>{try{const r=await f(String(e.id));if(console.log(`Status check for source ID ${e.id}:`,r),r.status!=="running"){if(console.log(`Scraper for source ID ${e.id} is no longer running. Status: ${r.status}`),clearInterval(a),r.status==="completed"||r.status==="success"){const g=`Successfully pulled data from ${e.name}`;console.log(`Success for source ID ${e.id}: ${g}`),n({title:"Success!",description:g,variant:"success",duration:1e4})}else(r.status==="timeout"||r.status==="failed")&&(console.log(`Error for source ID ${e.id}: ${r.message}`),n({title:"Error pulling data",description:r.message,variant:"destructive",duration:15e3}));l(),c(e.id,!1)}}catch(r){console.error("Error checking scraper status:",r),clearInterval(a),c(e.id,!1)}},2e3);return a},[f,c,n,l]);o.useEffect(()=>{N()},[N]);const F=o.useCallback(async e=>{try{c(e.id,!0);const a=`Starting to pull data from ${e.name}. This may take a while...`;n({title:"Pulling data",description:a,variant:"default",duration:0}),console.log(`Starting to pull data from source ID ${e.id}: ${e.name}`);const r=await $(String(e.id));if(console.log("Pull result:",r),r&&r.status==="success"){const g=`Successfully pulled data from ${e.name}`;n({title:"Success!",description:g,variant:"success",duration:1e4}),await l(),c(e.id,!1)}else if(r&&r.status==="error"){const g=r.message||`Failed to pull data from ${e.name}`;n({title:"Error pulling data",description:g,variant:"destructive",duration:15e3}),c(e.id,!1)}}catch(a){console.error("Error pulling data:",a),n({title:"Error pulling data",description:`An unexpected error occurred: ${a.message}`,variant:"destructive",duration:15e3}),c(e.id,!1)}},[$,l,c,n]),K=o.useCallback(()=>{h(!1),k(null)},[]);if((p||S)&&!s.length)return t.jsx(w,{title:"Data Sources",isLoading:!0,children:t.jsx("div",{children:"Loading data sources..."})});if(x&&!p&&!s.length)return t.jsxs("div",{className:"space-y-6",children:[t.jsx("h1",{className:"text-3xl font-bold tracking-tight",children:"Data Sources"}),t.jsxs(_,{variant:"destructive",children:[t.jsx(z,{children:"Error loading data sources"}),t.jsx(B,{children:x.message})]}),t.jsx(D,{onClick:b,children:"Retry"})]});const U=[{header:"Name",accessorKey:"name"},{header:"URL",accessorKey:"url"},{header:"Status",accessorKey:"status"},{header:"Last Checked",accessorKey:e=>e.lastChecked?V(e.lastChecked):"Never"},{header:"Proposals",accessorKey:e=>{var a;return((a=e.proposalCount)==null?void 0:a.toString())||"0"}},{header:"Actions",accessorKey:"id",cell:e=>t.jsxs("div",{className:"flex space-x-2",children:[t.jsx(D,{variant:"outline",size:"sm",onClick:()=>F(e),disabled:v[e.id],className:"min-w-[100px] transition-all duration-300 ease-in-out",children:v[e.id]?t.jsxs("span",{className:"flex items-center justify-center w-full",children:[t.jsx(W,{className:"mr-2 h-4 w-4"}),"Pulling..."]}):"Pull Source"}),t.jsx(D,{variant:"outline",size:"sm",onClick:()=>T(e),children:"Edit"})]})}];return t.jsx(w,{title:"Data Sources",children:t.jsxs("div",{className:"space-y-4 min-h-[500px] bg-background transition-all duration-300",children:[t.jsxs("div",{className:"flex justify-between items-center",children:[t.jsxs("p",{className:"text-muted-foreground",children:[s.length," data sources configured"]}),t.jsxs("div",{className:"flex gap-2",children:[t.jsx(D,{onClick:b,children:"Refresh"}),t.jsxs(G,{open:M,onOpenChange:h,children:[t.jsx(H,{asChild:!0,children:t.jsx(D,{children:"Add Data Source"})}),t.jsxs(X,{children:[t.jsx(q,{children:t.jsx(J,{children:d?"Edit Data Source":"Add Data Source"})}),t.jsx(Q,{initialData:d?{id:d.id,name:d.name,url:d.url,description:d.description}:void 0,onSubmit:e=>{d?R({...e,id:d.id}):A(e)},onCancel:K})]})]})]})]}),t.jsx(Y,{data:s,columns:U,emptyMessage:"No data sources configured",isLoading:S||p})]})})}export{de as default};
