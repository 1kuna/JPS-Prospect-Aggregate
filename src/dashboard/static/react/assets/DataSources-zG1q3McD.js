import{u as l,c as G,r as o,j as s,S as T,A as H,a as Y,b as J,B as D,D as Q,d as V,e as W,g as X,h as Z,i as ee,f as se}from"./index-CLP3MkSv.js";import{P as L,D as te}from"./DataTable-CyKk-xIV.js";const ae=a=>a.dataSources,re=a=>a.loading.dataSources,oe=a=>a.errors.dataSources,ce=a=>a.fetchDataSources,le=a=>a.createDataSource,ne=a=>a.updateDataSource,ie=a=>a.pullDataSource,ue=a=>a.getScraperStatus,r={},K=o.memo(({dataSource:a,onPull:g})=>{const c=l(k=>k.pullingProgress)[a.id]||!1,x=o.useCallback(()=>{c||g(a)},[a,c,g]);return s.jsx(D,{variant:"outline",size:"sm",onClick:x,disabled:c,className:"min-w-[100px] relative transition-all duration-300 ease-in-out",children:s.jsxs("span",{className:"flex items-center justify-center w-full",children:[c&&s.jsx(T,{className:"mr-2 h-4 w-4"}),c?"Pulling...":"Pull Source"]})})});K.displayName="PullButton";const R=o.memo(({row:a,onPull:g,onEdit:p})=>s.jsxs("div",{className:"flex space-x-2",children:[s.jsx(K,{dataSource:a,onPull:g}),s.jsx(D,{variant:"outline",size:"sm",onClick:()=>p(a),children:"Edit"})]}));R.displayName="ActionCell";function he(){const a=l(ae),g=l(re),p=l(oe),c=l(ce),x=l(le),k=l(ne),v=l(ie),y=l(ue),{toast:d}=G(),[O,f]=o.useState(!1),[h,j]=o.useState(null),[m,C]=o.useState(!0);o.useEffect(()=>{m&&c().then(()=>C(!1)).catch(()=>C(!1))},[c,m]);const P=o.useCallback(t=>{const e=t.id,S=l.getState().setPullingProgress;r[e]&&(clearInterval(r[e]),delete r[e]);let n=0,N="",$="";console.log(`[DataSources] Setting up polling for source ${e}`),r[e]=setInterval(async()=>{var E,I,A;try{n++,console.log(`[DataSources] Checking status for source ${e} (check #${n})`);const u=await y(String(e));console.log(`[DataSources] Status response for source ${e}:`,u);const i=((E=u.data)==null?void 0:E.status)||u.status,w=((I=u.data)==null?void 0:I.message)||u.message||"";if((A=u.data)!=null&&A.subtask_id&&!$&&($=u.data.subtask_id,console.log(`[DataSources] Found subtask ID: ${$} for source ${e}`)),console.log(`[DataSources] Actual status for source ${e}: ${i}, message: ${w}`),i===N&&n>1){console.log(`[DataSources] Status hasn't changed for source ${e}, continuing to poll`);return}if(N=i,i!=="running"&&i!=="pending"){console.log(`[DataSources] Source ${e} is no longer running (${i}), updating state`),clearInterval(r[e]),delete r[e],S(e,!1);const q=t.name||`Source #${e}`;i==="completed"||i==="success"||i==="working"?(console.log(`[DataSources] Source ${e} completed successfully, showing toast`),d({title:"Success!",description:`Successfully pulled data from ${q}`,variant:"success",duration:1e4}),c().catch(()=>{})):(console.log(`[DataSources] Source ${e} failed (${i}), showing error toast`),d({title:"Error pulling data",description:w||"An unknown error occurred",variant:"destructive",duration:15e3}))}else n>=150&&(console.log(`[DataSources] Source ${e} polling timeout after ${n} checks`),clearInterval(r[e]),delete r[e],S(e,!1),d({title:"Operation taking too long",description:`The operation for ${t.name} is still running in the background, but we've stopped checking its status. You can check the status later by refreshing the page.`,variant:"default",duration:15e3}))}catch(u){console.error(`[DataSources] Error checking status for source ${e}:`,u),n>10&&(console.log(`[DataSources] Too many errors checking status for source ${e}, stopping polling`),clearInterval(r[e]),delete r[e],S(e,!1),d({title:"Error checking status",description:`Failed to check status for ${t.name||`Source #${e}`}`,variant:"destructive",duration:1e4}))}},2e3)},[y,d,c]),B=o.useCallback(async t=>{const e=t.id,S=l.getState().setPullingProgress;if(l.getState().pullingProgress[e]){console.log(`[DataSources] Source ${e} is already being pulled, ignoring request`);return}console.log(`[DataSources] Starting pull for source ${e}`),S(e,!0),console.log(`[DataSources] Showing toast for source ${e}`),d({title:"Pulling data",description:`Starting to pull data from ${t.name}. This may take a while...`,variant:"default",duration:3e4});try{console.log(`[DataSources] Calling pullDataSource API for source ${e}`);const n=await v(String(e));console.log(`[DataSources] API call successful for source ${e}:`,n),P(t)}catch(n){console.error(`[DataSources] Error pulling source ${e}:`,n),d({title:"Error pulling data",description:`An unexpected error occurred: ${n.message}`,variant:"destructive",duration:15e3}),S(e,!1)}},[v,d,P]);o.useEffect(()=>()=>{console.log("[DataSources] Cleaning up all intervals"),Object.keys(r).forEach(t=>{clearInterval(r[Number(t)]),delete r[Number(t)]})},[]);const b=o.useCallback(()=>{c().catch(()=>{})},[c]),F=async t=>{try{await x(t),f(!1)}catch{}},U=async t=>{try{await k(String(t.id),t),f(!1),j(null)}catch{}},_=o.useCallback(t=>{j(t),f(!0)},[]),z=o.useCallback(()=>{f(!1),j(null)},[]);if((m||g)&&!a.length)return s.jsx(L,{title:"Data Sources",isLoading:!0,children:s.jsx("div",{className:"flex justify-center items-center h-[500px]",children:s.jsx(T,{})})});if(p&&!m&&!a.length)return s.jsxs("div",{className:"space-y-6",children:[s.jsxs(H,{variant:"destructive",children:[s.jsx(Y,{children:"Error loading data sources"}),s.jsx(J,{children:p.message})]}),s.jsx(D,{onClick:b,children:"Retry"})]});const M=[{header:"Name",accessorKey:"name"},{header:"URL",accessorKey:"url"},{header:"Status",accessorKey:"status"},{header:"Last Checked",accessorKey:t=>{const e=t.lastChecked||t.last_checked;return e?se(e):"Never"}},{header:"Proposals",accessorKey:t=>{var e;return((e=t.proposalCount)==null?void 0:e.toString())||"0"}},{header:"Actions",accessorKey:"id",cell:t=>s.jsx(R,{row:t,onPull:B,onEdit:_})}];return s.jsx(L,{title:"Data Sources",children:s.jsxs("div",{className:"space-y-4 min-h-[500px] bg-background transition-all duration-300",children:[s.jsxs("div",{className:"flex justify-between items-center",children:[s.jsxs("p",{className:"text-muted-foreground",children:[a.length," data sources configured"]}),s.jsxs("div",{className:"flex gap-2",children:[s.jsx(D,{onClick:b,children:"Refresh"}),s.jsxs(Q,{open:O,onOpenChange:f,children:[s.jsx(V,{asChild:!0,children:s.jsx(D,{children:"Add Data Source"})}),s.jsxs(W,{children:[s.jsx(X,{children:s.jsx(Z,{children:h?"Edit Data Source":"Add Data Source"})}),s.jsx(ee,{initialData:h?{id:h.id,name:h.name,url:h.url,description:h.description}:void 0,onSubmit:t=>{h?U(t):F(t)},onCancel:z})]})]})]})]}),s.jsx(te,{data:a,columns:M,emptyMessage:"No data sources configured",isLoading:g},"data-sources-table")]})})}export{he as default};
