"""Revert Proposal to Prospect model and table name

Revision ID: d1def2efebc3
Revises: 
Create Date: 2025-05-19 09:04:02.585739

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd1def2efebc3'
down_revision = 'a6bc8592cdf2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # This migration was designed for existing databases, not fresh installations
    # Check if tables exist before attempting to modify them
    
    from alembic import context
    
    # Get connection to check table existence
    connection = context.get_bind()
    
    # Check if inferred_prospect_data table exists
    result = connection.execute(sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'inferred_prospect_data')"
    )).fetchone()
    
    if result and result[0]:  # Table exists
        print("inferred_prospect_data table exists, checking for inferred_office column")
        # Check if inferred_office column exists before trying to drop it
        column_result = connection.execute(sa.text(
            "SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_name = 'inferred_prospect_data' AND column_name = 'inferred_office')"
        )).fetchone()
        
        if column_result and column_result[0]:  # Column exists
            print("inferred_office column exists, dropping it")
            with op.batch_alter_table('inferred_prospect_data', schema=None) as batch_op:
                batch_op.drop_column('inferred_office')
        else:
            print("inferred_office column does not exist, skipping drop")
    else:
        print("inferred_prospect_data table does not exist, skipping column drop")

    # Check if prospects table exists
    result = connection.execute(sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'prospects')"
    )).fetchone()
    
    if result and result[0]:  # Table exists
        print("prospects table exists, performing modifications")
        
        # Check which columns already exist
        inspector = sa.inspect(connection)
        existing_columns = [col['name'] for col in inspector.get_columns('prospects')]
        existing_indexes = [idx['name'] for idx in inspector.get_indexes('prospects')]
        
        with op.batch_alter_table('prospects', schema=None) as batch_op:
            # Only add columns that don't already exist
            if 'title' not in existing_columns:
                batch_op.add_column(sa.Column('title', sa.Text(), nullable=True))
            if 'description' not in existing_columns:
                batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
            if 'agency' not in existing_columns:
                batch_op.add_column(sa.Column('agency', sa.Text(), nullable=True))
            if 'release_date' not in existing_columns:
                batch_op.add_column(sa.Column('release_date', sa.Date(), nullable=True))
            if 'source_id' not in existing_columns:
                batch_op.add_column(sa.Column('source_id', sa.Integer(), nullable=True))
            
            # Only drop indexes if they exist
            if 'ix_prospects_solicitation_date' in existing_indexes:
                batch_op.drop_index('ix_prospects_solicitation_date')
            else:
                print("Index ix_prospects_solicitation_date does not exist, skipping drop")
            
            if 'ix_prospects_source' in existing_indexes:
                batch_op.drop_index('ix_prospects_source')
            else:
                print("Index ix_prospects_source does not exist, skipping drop")
            
            # Only create indexes if they don't already exist
            if 'ix_prospects_release_date' not in existing_indexes:
                batch_op.create_index(batch_op.f('ix_prospects_release_date'), ['release_date'], unique=False)
            else:
                print("Index ix_prospects_release_date already exists, skipping creation")
                
            if 'ix_prospects_source_id' not in existing_indexes:
                batch_op.create_index(batch_op.f('ix_prospects_source_id'), ['source_id'], unique=False)
            else:
                print("Index ix_prospects_source_id already exists, skipping creation")
                
            # Check for foreign key before creating
            existing_fks = [fk['name'] for fk in inspector.get_foreign_keys('prospects')]
            if 'fk_prospects_source_id_data_sources' not in existing_fks:
                batch_op.create_foreign_key('fk_prospects_source_id_data_sources', 'data_sources', ['source_id'], ['id'])
            else:
                print("Foreign key fk_prospects_source_id_data_sources already exists, skipping creation")
            
            # Only drop columns if they exist
            if 'requirement_title' in existing_columns:
                batch_op.drop_column('requirement_title')
            else:
                print("Column requirement_title does not exist, skipping drop")
            
            if 'source' in existing_columns:
                batch_op.drop_column('source')
            else:
                print("Column source does not exist, skipping drop")
            
            if 'solicitation_date' in existing_columns:
                batch_op.drop_column('solicitation_date')
            else:
                print("Column solicitation_date does not exist, skipping drop")
            
            if 'requirement_description' in existing_columns:
                batch_op.drop_column('requirement_description')
            else:
                print("Column requirement_description does not exist, skipping drop")
            
            if 'office' in existing_columns:
                batch_op.drop_column('office')
            else:
                print("Column office does not exist, skipping drop")
    else:
        print("prospects table does not exist, skipping modifications")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('prospects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('office', sa.TEXT(), nullable=True))
        batch_op.add_column(sa.Column('requirement_description', sa.TEXT(), nullable=True))
        batch_op.add_column(sa.Column('solicitation_date', sa.DATE(), nullable=True))
        batch_op.add_column(sa.Column('source', sa.VARCHAR(), nullable=False))
        batch_op.add_column(sa.Column('requirement_title', sa.TEXT(), nullable=True))
        batch_op.drop_constraint('fk_prospects_source_id_data_sources', type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_prospects_source_id'))
        batch_op.drop_index(batch_op.f('ix_prospects_release_date'))
        batch_op.create_index('ix_prospects_source', ['source'], unique=False)
        batch_op.create_index('ix_prospects_solicitation_date', ['solicitation_date'], unique=False)
        batch_op.drop_column('source_id')
        batch_op.drop_column('release_date')
        batch_op.drop_column('agency')
        batch_op.drop_column('description')
        batch_op.drop_column('title')

    with op.batch_alter_table('inferred_prospect_data', schema=None) as batch_op:
        batch_op.add_column(sa.Column('inferred_office', sa.TEXT(), nullable=True))

    # with op.batch_alter_table('scraper_status', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_scraper_status_source_id'))

    # op.drop_table('scraper_status')
    # with op.batch_alter_table('data_sources', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_data_sources_name'))

    # op.drop_table('data_sources')
    # ### end Alembic commands ###
