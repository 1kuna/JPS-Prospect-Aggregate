name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  python-tests:
    name: Python Tests & Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy pytest-asyncio pytest-mock

    - name: Create test environment file
      run: |
        cat > .env << EOF
        FLASK_ENV=testing
        TESTING=True
        DATABASE_URL=sqlite:///test_jps_aggregate.db
        USER_DATABASE_URL=sqlite:///test_jps_users.db
        SECRET_KEY=test-secret-key-for-ci
        ENVIRONMENT=testing
        EOF

    - name: Set up test database
      run: |
        python -c "
        from app import create_app
        from app.database import db
        app = create_app()
        with app.app_context():
            db.create_all()
        "

    - name: Run Python linting with ruff
      run: |
        ruff check app/ --output-format=github
        ruff format app/ --check

    - name: Run type checking with mypy
      run: |
        mypy app/ --ignore-missing-imports --disallow-untyped-defs

    - name: Run Python tests with coverage
      run: |
        python -m pytest tests/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=75 \
          --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-react/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend-react
      run: npm ci

    - name: Run TypeScript type checking
      working-directory: frontend-react
      run: npx tsc --noEmit

    - name: Run ESLint
      working-directory: frontend-react
      run: npm run lint -- --max-warnings 0

    - name: Run frontend tests with coverage
      working-directory: frontend-react
      run: npm run test:coverage -- --run

    - name: Build frontend
      working-directory: frontend-react
      run: npm run build

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./frontend-react/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env << EOF
        FLASK_ENV=testing
        TESTING=True
        DATABASE_URL=sqlite:///test_jps_aggregate.db
        USER_DATABASE_URL=sqlite:///test_jps_users.db
        SECRET_KEY=test-secret-key-for-ci
        ENVIRONMENT=testing
        EOF

    - name: Set up test database
      run: |
        python -c "
        from app import create_app
        from app.database import db
        app = create_app()
        with app.app_context():
            db.create_all()
        "

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v \
          --tb=short \
          -m integration

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-react/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd frontend-react && npm ci

    - name: Install Playwright
      working-directory: frontend-react
      run: npx playwright install --with-deps

    - name: Create test environment file
      run: |
        cat > .env << EOF
        FLASK_ENV=testing
        TESTING=True
        DATABASE_URL=sqlite:///test_jps_aggregate.db
        USER_DATABASE_URL=sqlite:///test_jps_users.db
        SECRET_KEY=test-secret-key-for-ci
        ENVIRONMENT=testing
        EOF

    - name: Set up test database
      run: |
        python -c "
        from app import create_app
        from app.database import db
        app = create_app()
        with app.app_context():
            db.create_all()
        "

    - name: Build frontend
      working-directory: frontend-react
      run: npm run build

    - name: Start backend server
      run: |
        python run.py &
        sleep 10
      env:
        FLASK_ENV: testing

    - name: Start frontend server
      working-directory: frontend-react
      run: |
        npm run preview &
        sleep 5

    - name: Run E2E tests
      working-directory: frontend-react
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: frontend-react/playwright-report/
        retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety check for Python dependencies
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Run npm audit for frontend dependencies
      working-directory: frontend-react
      run: |
        npm audit --audit-level moderate --json > npm-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          frontend-react/npm-audit-report.json

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deployment gate passed
      run: |
        echo "ðŸŽ‰ All tests passed! Ready for deployment"
        echo "::notice title=Deployment Ready::All CI checks have passed successfully"