# Load environment variables from .env file
# Copy .env.example to .env and configure your settings
# This file should contain your secret database passwords and keys

services:
  web:
    build: .
    image: jps-prospect-aggregate:latest
    container_name: jps-web
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://jps_user:${DB_PASSWORD}@db:5432/jps_prospects
      - USER_DATABASE_URL=postgresql://jps_user:${DB_PASSWORD}@db:5432/jps_users
      - SECRET_KEY=${SECRET_KEY}
      - FILE_FRESHNESS_SECONDS=86400
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - jps-network

  db:
    image: postgres:15-alpine
    container_name: jps-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=jps_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=jps_prospects
      - POSTGRES_MULTIPLE_DATABASES=jps_prospects,jps_users
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./backups:/backups
    entrypoint: >
      sh -c "
        chmod +x /docker-entrypoint-initdb.d/init-db.sh &&
        docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jps_user -d jps_prospects"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jps-network

  ollama:
    image: ollama/ollama:latest
    container_name: jps-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
      - ./docker/ollama-init.sh:/ollama-init.sh:ro
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    entrypoint: >
      sh -c "
        ollama serve &
        sleep 10 &&
        chmod +x /ollama-init.sh &&
        /ollama-init.sh &&
        wait
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
    networks:
      - jps-network

  watchtower:
    image: containrrr/watchtower
    container_name: jps-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=300  # Check every 5 minutes
    networks:
      - jps-network

  backup:
    image: postgres:15-alpine
    container_name: jps-backup
    volumes:
      - ./backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_USER=jps_user
    entrypoint: ["/bin/sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - db
    networks:
      - jps-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: jps-cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - jps-network
    depends_on:
      - web

volumes:
  postgres_data:
  ollama_data:

networks:
  jps-network:
    driver: bridge