# Load environment variables from .env file
# Copy .env.example to .env and configure your settings
# This file should contain your secret database passwords and keys

services:
  web:
    build: .
    image: jps-prospect-aggregate:latest
    container_name: jps-web
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://jps_user:${DB_PASSWORD}@db:5432/jps_prospects
      - USER_DATABASE_URL=postgresql://jps_user:${DB_PASSWORD}@db:5432/jps_users
      - SECRET_KEY=${SECRET_KEY}
      - FILE_FRESHNESS_SECONDS=86400
    volumes:
      # Use relative paths for cross-platform compatibility
      # These work on both Windows and Mac/Linux
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - jps-network

  db:
    image: postgres:15-alpine
    container_name: jps-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=jps_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=jps_prospects
      - POSTGRES_MULTIPLE_DATABASES=jps_prospects,jps_users
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      # Named volume for database data (cross-platform)
      - postgres_data:/var/lib/postgresql/data
      # Backup directory (works on all platforms)
      - ./backups:/backups
    # Cross-platform database initialization
    entrypoint: >
      sh -c "
        docker-entrypoint.sh postgres &
        sleep 15 &&
        until pg_isready -U jps_user -d postgres; do sleep 1; done &&
        psql -U jps_user -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'jps_prospects'\" | grep -q 1 || psql -U jps_user -d postgres -c \"CREATE DATABASE jps_prospects\" &&
        psql -U jps_user -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'jps_users'\" | grep -q 1 || psql -U jps_user -d postgres -c \"CREATE DATABASE jps_users\" &&
        echo 'Databases created successfully' &&
        wait
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jps_user -d jps_prospects"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jps-network

  ollama:
    image: ollama/ollama:latest
    container_name: jps-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
    entrypoint: >
      sh -c "
        echo 'Starting Ollama service with automatic model installation...' &&
        ollama serve &
        OLLAMA_PID=$$! &&
        sleep 15 &&
        echo 'Waiting for Ollama server to be ready...' &&
        for i in \$$(seq 1 30); do
          if curl -s http://localhost:11434/api/version > /dev/null 2>&1; then
            echo 'Ollama server is ready!'
            break
          fi
          if [ \$$i -eq 30 ]; then
            echo 'ERROR: Ollama server failed to start after 60 seconds'
            exit 1
          fi
          echo \"Waiting for Ollama server... attempt \$$i/30\"
          sleep 2
        done &&
        echo 'Checking if qwen3:latest model is already installed...' &&
        if ! ollama list | grep -q 'qwen3:latest'; then
          echo 'Downloading qwen3:latest model (5.2GB - this may take several minutes)...' &&
          ollama pull qwen3:latest &&
          echo 'Successfully downloaded qwen3:latest model!'
        else
          echo 'qwen3:latest model is already installed!'
        fi &&
        echo 'Verifying model installation...' &&
        if ollama list | grep -q 'qwen3:latest'; then
          echo 'âœ“ qwen3:latest model is ready for use!'
        else
          echo 'ERROR: Model installation verification failed'
          exit 1
        fi &&
        echo 'Ollama initialization complete - service ready!' &&
        wait $$OLLAMA_PID
      "
    healthcheck:
      test: >
        sh -c "
          curl -f http://localhost:11434/api/version >/dev/null 2>&1 &&
          ollama list | grep -q 'qwen3:latest' || exit 1
        "
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 300s  # Allow 5 minutes for model download on first startup
    deploy:
      resources:
        limits:
          memory: 8G
    networks:
      - jps-network

  # Watchtower service for auto-updates (optional - comment out if not needed)
  # Note: On Windows, Docker Desktop handles the socket mount automatically
  # On Mac/Linux, this uses the standard Unix socket path
  watchtower:
    image: containrrr/watchtower
    container_name: jps-watchtower
    restart: unless-stopped
    volumes:
      # Docker socket mount - works automatically on all platforms
      # Windows: Docker Desktop translates this path
      # Mac/Linux: Uses native Unix socket
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=300  # Check every 5 minutes
    networks:
      - jps-network
    # Make watchtower optional - remove this service if you don't want auto-updates
    profiles:
      - full

  backup:
    image: postgres:15-alpine
    container_name: jps-backup
    volumes:
      - ./backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_USER=jps_user
    entrypoint: ["/bin/sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - db
    networks:
      - jps-network

  # Cloudflare tunnel (optional - comment out if not using)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: jps-cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - jps-network
    depends_on:
      - web
    # Make cloudflared optional - only runs when CLOUDFLARE_TUNNEL_TOKEN is set
    profiles:
      - cloudflare

volumes:
  postgres_data:
  ollama_data:

networks:
  jps-network:
    driver: bridge