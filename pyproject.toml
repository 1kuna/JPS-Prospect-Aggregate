[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jps-prospect-aggregate"
version = "1.0.0"
description = "JPS Prospect Aggregation System"
readme = "README.md"
authors = [
    {name = "JPS Team", email = "team@jps.com"}
]
license = {text = "MIT"}
requires-python = ">=3.11"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.lint]
select = ["F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, print statements, etc.
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests
    "ARG",     # Unused function args in tests
    "FBT",     # Boolean trap ok in tests
    "PLR2004", # Magic value comparisons ok in tests
    "S311",    # Standard pseudo-random generators ok in tests
    "D",       # Don't require docstrings in tests
]

# Scripts can use print statements
"scripts/**/*.py" = ["T201"]

# Configuration files can have imports
"*/config.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*",
    "scripts.*"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "flask_sqlalchemy.*",
    "sqlalchemy.*",
    "alembic.*",
    "playwright.*",
    "playwright_stealth.*",
    "openpyxl.*",
    "pandas.*",
    "loguru.*",
    "tenacity.*",
    "psutil.*",
    "waitress.*",
    "apscheduler.*",
    "httpx.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "app/config.py",
    "app/__init__.py",
    "migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert and shell usage checks

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]
